@use "sass:map";
@use "sass:color";
@use "sass:string";
@use "sass:meta";
@use "../variables" as *;

/*
 * ================ Functions ================
 */

/*
 * Returns the color and opacity in oklch format.
 *
 * @param {string} $color - Name of the color inside the primitives
 * @param {string} $shade - Shade of the color inside the primitive
 * @param {number} $opacity - Value of the Opacity from 0 to 1
 * @return {string} - Color in oklch format with the indicated opacity and the name of the CSS variable
 *
 * @example SCSS
 *   color(neutral, 50)      => oklch(var(--color-neutral-50) / 1)
 *   color(neutral, 50, 0.5) => oklch(var(--color-neutral-50) / 0.5)
 */

@function color($color, $shade: null, $opacity: 1) {
  @if meta.type-of($opacity) == number and ($opacity < 0 or $opacity > 1) {
    @error "The opacity must have a value between 0 and 1";
  }

  @if $shade {
    $primitive-value: map.get($primitives, $color, $shade);
    @if $primitive-value {
      @return oklch(var(--color-#{$color}-#{$shade}) / #{$opacity});
    }
  } @else {
    $primitive-value: map.get($primitives, $color);
    @if $primitive-value {
      @return oklch(var(--color-#{$color}) / #{$opacity});
    }
  }

  @error "The primitive '#{$color}#{if($shade, '-#{$shade}', '')}' does not exist";
}

/*
 * ================ Mixins ================
 */

/*
 * Generates CSS variables for a specific theme
 *
 * @param {Map} $theme-map - Map of colors
 *
 * @example SCSS
 *   :root {
 *     @include generate-css-color-variables($theme-map);
 *   }
 *
 * @result CSS
 *   :root {
 *     --color-background: var(--color-neutral-50);
 *     --color-foreground: var(--color-neutral-950);
 *     --color-card: var(--color-neutral-50);
 *     --color-card-foreground: var(--color-neutral-950);
 *     --color-popover: var(--color-neutral-50);
 *     --color-popover-foreground: var(--color-neutral-950);
 *   }
 */
@mixin generate-css-color-variables($theme-map) {
  @each $color-name, $color-value in $theme-map {
    --color-#{$color-name}: #{$color-value};
  }
}

/*
 * Generates CSS variables for nested primitives
 *
 * @param {Map} $primitive-map - Map of colors
 * @param {String} $prefix - Prefix for the variables
 *
 * @example SCSS
 *   :root {
 *     @include generate-css-color-primitive-variables($primitive-map);
 *   }
 *
 * @result CSS
 *   :root {
 *     --color-neutral-50: oklch(98.5% 0 0);
 *     --color-neutral-100: oklch(97% 0 0);
 *     --color-neutral-200: oklch(92.2% 0 0);
 *     --color-neutral-300: oklch(87% 0 0);
 *     --color-neutral-400: oklch(70.8% 0 0);
 *     --color-neutral-500: oklch(55.6% 0 0);
 *     --color-neutral-600: oklch(43.9% 0 0);
 *     --color-neutral-700: oklch(37.1% 0 0);
 *     --color-neutral-800: oklch(26.9% 0 0);
 *     --color-neutral-900: oklch(20.5% 0 0);
 *     --color-neutral-950: oklch(14.5% 0 0);
 *   }
 */
@mixin generate-css-color-primitive-variables($primitive-map) {
  @each $color-name, $color-value in $primitive-map {
    @if type-of($color-value) == map {
      @each $shade, $shade-value in $color-value {
        --color-#{$color-name}-#{$shade}: #{$shade-value};
      }
    } @else {
      --color-#{$color-name}: #{$color-value};
    }
  }
}
