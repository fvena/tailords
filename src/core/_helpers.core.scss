@use "sass:math";
@use "sass:list";
@use "sass:meta";
@use "../config" as *;
@use "../variables" as *;

/*
 * ================ Funciones ================
 */

/*
 * Checks if a utility group or sub-group should be generated based on configuration
 *
 * @param {string} $module - Module name (e.g., 'colors', 'borders')
 * @param {string} $sub-module - Optional sub-module name (e.g., 'backgrounds', 'gradients')
 * @return {Boolean} - true if should be generated
 *
 * @example SCSS
 *   generate(colors)                    => true/false (entire colors module)
 *   generate(colors, backgrounds)       => true/false (specific backgrounds sub-module)
 *   generate(borders)                   => true/false (entire borders module)
 */

@function generate($module, $sub-module: null) {
  // Get the classes configuration
  $classes-config: map.get($utilities, classes);

  // Check if module exists in classes configuration
  @if not map.has-key($classes-config, $module) {
    @return false; // Module not defined = false by default
  }

  $module-config: map.get($classes-config, $module);

  // If module config is a boolean, return it directly
  @if meta.type-of($module-config) == bool {
    @return $module-config;
  }

  // If module config is a map but no sub-module specified, return true
  // (means the module is enabled but caller wants to check sub-modules individually)
  @if $sub-module == null {
    @return true;
  }

  // Check if sub-module exists and return its value
  @if map.has-key($module-config, $sub-module) {
    @return map.get($module-config, $sub-module);
  }

  @return false; // Sub-module not defined = false by default
}

/*
 * Devuelve el nombre de la variable o su valor dependiendo de si las variables CSS están activadas
 *
 * @param {string} $name - Nombre de la variable
 * @param {string} $value - Valor de la variable
 * @return {string} - Nombre de la variable o su valor
 *
 * @example SCSS
 *   isVar('--border-style', $border-style) => var(--border-style) // css-variable = true
 *   isVar('--border-style', $border-style) => $border-style // css-variable = false
 */

@function isVar($name, $value) {
  @if $css-variables == true {
    @return var(#{$name});
  }

  @return $value;
}

/*
 * Comprueba si un valor es una dirección de degradado válida
 *
 * @param {*} $value - Valor para comprobar
 * @return {Bool}
 *
 * @example SCSS
 *   is-direction('to top right')    => true
 *   is-direction('top right')       => false
 *   is-direction(135deg)            => true
 *   is-direction(135)               => false
 */

@function is-direction($value) {
  $is-keyword: list.index(
    (
      "to top",
      "to top right",
      "to right top",
      "to right",
      "to bottom right",
      "to right bottom",
      "to bottom",
      "to bottom left",
      "to left bottom",
      "to left",
      "to left top",
      "to top left"
    ),
    $value
  );

  $is-angle: meta.type-of($value) == "number" and
    list.index("deg" "grad" "turn" "rad", math.unit($value));

  @return $is-keyword or $is-angle;
}
