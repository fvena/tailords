@use "sass:map";
@use "sass:meta";
@use "sass:string";

/*
 * ================ Template Parsing Functions ================
 * Sistema completo de parseo de templates con todos los placeholders
 */

/*
 * Parsea templates para gradientes con placeholders completos
 * Soporte para {gradient}, {abbr(gradient)}, {responsive}, {hover}
 */
@function parse-gradient-template($template, $gradient-name, $gradient-map: null) {
  $result: $template;

  // Si no hay template, retorna nombre por defecto
  @if $template == "" or $template == null {
    @return "";
  }

  // Reemplazar {abbr(gradient)} - busca abreviación en gradient map
  @if string.index($result, "{abbr(gradient)}") {
    $abbr: $gradient-name;
    @if $gradient-map and map.has-key($gradient-map, $gradient-name) {
      $gradient-data: map.get($gradient-map, $gradient-name);
      @if meta.type-of($gradient-data) == "map" and map.has-key($gradient-data, abbr) {
        $abbr: map.get($gradient-data, abbr);
      }
    }
    $result: string.replace($result, "{abbr(gradient)}", $abbr);
  }

  // Reemplazar {gradient}
  @if string.index($result, "{gradient}") {
    $result: string.replace($result, "{gradient}", $gradient-name);
  }

  @return $result;
}

/*
 * Parsea templates para variantes de scrim
 * Soporte para {variant}, {abbr(variant)}, etc.
 */
@function parse-scrim-template($template, $variant-name: "default") {
  $result: $template;

  @if $template == "" or $template == null {
    @return "";
  }

  // Reemplazar {variant}
  @if string.index($result, "{variant}") {
    $variant-suffix: if($variant-name == "default", "", "-#{$variant-name}");
    $result: string.replace($result, "{variant}", $variant-suffix);
  }

  @return $result;
}

/*
 * Parse templates for colors with support for opacity
 *
 * @param {string} $template - The template to parse
 * @param {string} $color-name - The name of the color to parse
 * @param {number} $opacity - The opacity of the color to parse
 * @param {string} $hover-suffix - The suffix to use for hover styles
 * @return {string} - The parsed template
 *
 * @example SCSS
 *   parse-color-template("bg-{color}", "brand") => "bg-brand"
 *   parse-color-template("bg-{color}-{opacity}", "brand", 100) => "bg-brand-100"
 *   parse-color-template("bg-{color}-{hover}", "brand", null, "-hover") => "bg-brand-hover"
 */
@function generate-color-class-name(
  $template,
  $color-name,
  $opacity: null,
  $prefix: null,
  $hover-suffix: null
) {
  // Replace {color} placeholder
  @if string.index($template, "{color}") == null {
    @error "Template must contain {color} placeholder";
  }

  $result: string.replace($template, "{color}", $color-name);

  // Replace {opacity} placeholder
  @if $opacity != null {
    @if string.index($result, "{opacity}") == null {
      @error "Template must contain {opacity} placeholder";
    }
    $result: string.replace($result, "{opacity}", $opacity);
  }

  // Replace {prefix} placeholder if it exists or remove it if it doesn't
  @if string.index($result, "{prefix}") != null {
    $result: string.replace($result, "{prefix}", $prefix);
  } @else {
    $result: string.replace($result, "{prefix}", "");
  }

  // Replace {hover} placeholder if it exists or remove it if it doesn't
  @if string.index($result, "{hover}") != null {
    $result: string.replace($result, "{hover}", $hover-suffix);
  } @else {
    $result: string.replace($result, "{hover}", "");
  }

  @return $result;
}

/*
 * Parsea templates con soporte responsive completo
 * Añade {responsive} y {abbr(responsive)} placeholders
 */
@function parse-responsive-placeholders($template, $breakpoint: null, $abbreviations: null) {
  $result: $template;

  @if $breakpoint == null {
    // Sin responsive, limpiar placeholders
    $result: string.replace($result, "{responsive}", "");
    $result: string.replace($result, "{abbr(responsive)}", "");
    @return $result;
  }

  // Reemplazar {abbr(responsive)}
  @if string.index($result, "{abbr(responsive)}") and $abbreviations {
    $responsive-abbrs: map.get($abbreviations, responsive);
    $abbr: if(
      $responsive-abbrs and map.has-key($responsive-abbrs, $breakpoint),
      map.get($responsive-abbrs, $breakpoint),
      $breakpoint
    );
    $result: string.replace($result, "{abbr(responsive)}", $abbr);
  }

  // Reemplazar {responsive}
  @if string.index($result, "{responsive}") {
    $result: string.replace($result, "{responsive}", "--#{$breakpoint}");
  }

  @return $result;
}

/*
 * Parsea templates con soporte hover completo
 */
@function parse-hover-placeholders($template, $is-hover: false, $abbreviations: null) {
  $result: $template;

  @if not $is-hover {
    // Sin hover, limpiar placeholders
    $result: string.replace($result, "{hover}", "");
    $result: string.replace($result, "{abbr(hover)}", "");
    @return $result;
  }

  // Reemplazar {abbr(hover)}
  @if string.index($result, "{abbr(hover)}") and $abbreviations {
    $hover-abbr: map.get($abbreviations, hover);
    $abbr: if($hover-abbr, $hover-abbr, "hover");
    $result: string.replace($result, "{abbr(hover)}", $abbr);
  }

  // Reemplazar {hover}
  @if string.index($result, "{hover}") {
    $result: string.replace($result, "{hover}", "--hover");
  }

  @return $result;
}

/*
 * Parser universal para cualquier template con todos los placeholders
 * Combina todos los sistemas de placeholders
 */
@function parse-universal-template(
  $template,
  $token-name,
  $token-map: null,
  $breakpoint: null,
  $is-hover: false,
  $abbreviations: null
) {
  $result: $template;

  @if $template == "" or $template == null {
    @return "";
  }

  // 1. Parsear token-specific placeholders
  @if $token-map {
    @if string.index($result, "{abbr(") or string.index($result, "{color}") {
      $result: parse-color-template($result, $token-name, $token-map);
    }
  }

  // 2. Parsear responsive placeholders
  $result: parse-responsive-placeholders($result, $breakpoint, $abbreviations);

  // 3. Parsear hover placeholders
  $result: parse-hover-placeholders($result, $is-hover, $abbreviations);

  // 4. Reemplazar placeholders genéricos restantes
  @if string.index($result, "{token}") {
    $result: string.replace($result, "{token}", $token-name);
  }

  @return $result;
}
