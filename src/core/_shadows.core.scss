@use "sass:math";
@use "../variables" as *;
@use "math.core" as *;
@use "colors.core" as *;

/*
 * ================ Funciones ================
 */

/*
 * Devuelve una sombra suavizada utilizando la técnica del layering
 *
 * @param {Number} $size - Tamaño de la sombra, a mayor valor, mayor sombra
 * @param {String} $color - Color de la sombra en hexadecimal o el nombre de un color predefinido
 * @param {Number} $soft - Suavizado de la sombra, varía el desenfoque de la sombra generando sombras más o menos suavizadas
 * @param {Number} $shadow-horizontal - Longitud de la sombra horizontal
 * @param {Number} $shadow-vertical - Longitud de la sombra vertical
 * @param {Number} $hardness - Dureza de la sombra, varía la intensidad de la sombra haciéndola más oscura o clara
 * @return {String} - Listado con todas las sombras generadas
 *
 * @example SCSS
 *   shadow(4) => 0 1px 1px rgba(var(--shadow-color), 0.25),
 *                0 2px 2px rgba(var(--shadow-color), 0.2),
 *                0 4px 4px rgba(var(--shadow-color), 0.1666666667),
 *                0 8px 8px rgba(var(--shadow-color), 0.1428571429),
 *                0 16px 16px rgba(var(--shadow-color), 0.125)
 */

@function shadow(
  $size,
  $color: $shadow-color,
  $soft: $shadow-soft,
  $shadow-horizontal: $shadow-horizontal,
  $shadow-vertical: $shadow-vertical,
  $hardness: $shadow-hard,
  $invertAplha: $shadow-invert-alpha
) {
  @if $size < 1 {
    @error "El tamaño de la sombra debe ser mayor de cero";
  }

  @if $soft < 1 {
    @error "El suavizado de la sombra debe ser mayor de cero";
  }

  @if $shadow-horizontal < 0 {
    @error "La longitud horizontal de la sombra debe ser mayor de cero";
  }

  @if $shadow-vertical < 0 {
    @error "La longitud vertical de la sombra debe ser mayor de cero";
  }

  @if $hardness < 1 {
    @error "La dureza de la sombra debe ser mayor de cero";
  }

  $shadow: "";

  @for $i from 0 through $size {
    $x: $shadow-horizontal * power2($i);
    $y: $shadow-vertical * power2($i);
    $blur: $soft * power2($i);

    $opacity: math.div($hardness, 2 * ($i + 4));

    @if $invertAplha == true {
      $opacity: math.div($hardness, 2 * ($size - $i + 4));
    }

    @if $enable-css-variables == true and $color == $shadow-color {
      $shadow:
        #{$shadow},
        #{$x}px #{$y}px #{$blur}px rgba(var(--shadow-color), $opacity);
    } @else {
      $shadow:
        #{$shadow},
        #{$x}px #{$y}px #{$blur}px color($color, $opacity);
    }
  }

  @return $shadow;
}
