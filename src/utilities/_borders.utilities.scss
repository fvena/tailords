@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/colors.core" as *;
@use "../core/borders.core" as *;

/*
 * ================ Border Utilities Generator ================
 */

/*
 * Border Positions
 */
@if $generate-border-positions {
  $template: map.get($utility-classes, border-positions);

  // Parse template for different positions
  $positions: (
    all: "",
    top: "-t",
    right: "-r",
    bottom: "-b",
    left: "-l",
    x: "-x",
    y: "-y",
  );

  @each $position-key, $position-suffix in $positions {
    $class-name: parse-border-template($template, $position-key);

    .#{$prefix}#{$class-name} {
      @if $position-key == all {
        border: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
      } @else if $position-key == x {
        border-right: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
        border-left: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
      } @else if $position-key == y {
        border-top: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
        border-bottom: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
      } @else {
        border-#{$position-key}: border($border-default-width)
          $border-default-style
          color($border-default-color)
          #{$important};
      }
    }
  }
}

/*
 * Border Colors
 */
@if $generate-border-colors {
  $template: map.get($utility-classes, border-colors);

  @each $theme-name, $theme-colors in $themes {
    @each $color-name, $color-value in $theme-colors {
      $class-name: parse-color-template($template, $color-name, $theme-colors);

      .#{$prefix}#{$class-name} {
        border-color: color($color-name) #{$important};
      }
    }
  }
}

/*
 * Border Widths
 */
@if $generate-border-widths {
  $template: map.get($utility-classes, border-widths);

  @each $name, $value in $border-widths {
    $class-name: parse-border-width-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      border-width: border($name) #{$important};
    }
  }
}

/*
 * Border Styles
 */
@if $generate-border-styles {
  $template: map.get($utility-classes, border-styles);

  @each $style in $border-styles {
    $class-name: parse-border-style-template($template, $style);

    .#{$prefix}#{$class-name} {
      border-style: $style #{$important};
    }
  }
}

/*
 * Border Radius
 */
@if $generate-border-radius {
  $template: map.get($utility-classes, border-radius);

  @each $name, $value in $border-radius {
    $class-name: parse-radius-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      border-radius: radius($name) #{$important};
    }
  }

  // Special cases
  .#{$prefix}rounded-full {
    border-radius: 50% #{$important};
  }

  .#{$prefix}rounded-none {
    border-radius: 0 #{$important};
  }
}
