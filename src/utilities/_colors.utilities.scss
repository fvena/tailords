@use "sass:map";
@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/hover.core" as *;
@use "../core/colors.core" as *;

/*
 * ================ Color System Validation ================
 */

/*
 * Verify that the color system is properly configured
 *
 * @param {map} $themes - The themes configuration
 * @param {string} $primary-theme - The primary theme
 * @return {boolean} - true if the color system is properly configured
 */
@mixin validate-themes($themes, $primary-theme) {
  @if not map.has-key($themes, $primary-theme) {
    @error 'Primary theme "#{$primary-theme}" not found in themes configuration. Available themes: #{map.keys($themes)}';
  }

  $primary-map: map.get($themes, $primary-theme);

  @if meta.type-of($primary-map) != "map" {
    @error 'Primary theme colors must be a valid Sass map';
  }

  @each $theme, $map in $themes {
    @if $theme != $primary-theme {
      @if meta.type-of($map) != "map" {
        @error 'Theme "#{$theme}" must be a valid Sass map';
      }

      @each $key, $value in $map {
        @if not map.has-key($primary-map, $key) {
          @error 'Color "#{$key}" in theme "#{$theme}" not found in primary theme "#{$primary-theme}".';
        }
      }
    }
  }
}

/*
 * ================ Color Utilities Generator ================
 */

/*
 * Background Colors - generate a CSS utility classes for each color in the primary theme
 */
@if $template-background-colors {
  $theme-map: map.get($themes, $primary-theme);

  @each $color-name, $color-value in $theme-map {
    $class-name: generate-color-class-name(
      $template-background-colors,
      $color-name,
      null,
      $prefix,
      $hover-token
    );

    .#{$class-name} {
      @include hover($template) using ($hover-token) {
        --bg-opacity: 1;
        background-color: color($color-name, var(--bg-opacity)) #{$important};
      }
    }
  }
}

/*
 * Background Opacity - Template System
 */
@if $generate-background-opacity {
  $template: map.get($utility-classes, background-opacity);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        --bg-opacity: #{$value} #{$important};
      }
    }
  }
}

/*
 * Text Colors - Template System
 */
@if $generate-text-colors {
  $template: map.get($utility-classes, text-colors);

  @each $theme-name, $theme-colors in $themes {
    @each $color-name, $color-value in $theme-colors {
      $class-name: parse-color-template($template, $color-name, $theme-colors);

      .#{$prefix}#{$class-name} {
        @include hover {
          --color-opacity: 1;
          color: color($color-name, var(--color-opacity)) #{$important};
        }
      }
    }
  }
}

/*
 * Text Opacity - Template System
 */
@if $generate-text-opacity {
  $template: map.get($utility-classes, text-opacity);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        --color-opacity: #{$value} #{$important};
      }
    }
  }
}

/*
 * Element Opacities - Template System
 */
@if $generate-opacities {
  $template: map.get($utility-classes, opacities);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        opacity: #{$value} #{$important};
      }
    }
  }
}

/*
 * ================ Gradient Utilities - Template System ================
 */

/*
 * Background Gradients - Completamente Template-Based
 */
@if $generate-background-gradients {
  $template: map.get($utility-classes, background-gradients);

  @each $gradient-name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $gradient-name, $gradients);

    .#{$prefix}#{$class-name} {
      background: gradient($gradient-name) #{$important};
    }
  }
}

/*
 * Text Gradients - Template System con Mixin Integration
 */
@if $generate-text-gradients {
  $template: map.get($utility-classes, text-gradients);

  @each $gradient-name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $gradient-name, $gradients);

    .#{$prefix}#{$class-name} {
      @include text-gradient($gradient-name, "", linear, to right);
    }
  }

  // Generic text gradient usando brand - Solo si template habilitado
  @if map.get($utility-classes, text-gradients) != "" {
    .#{$prefix}text-gradient {
      @include text-gradient(brand);
    }
  }
}

/*
 * Border Gradients - Template System con Mixin Integration
 */
@if $generate-border-gradients {
  $template: map.get($utility-classes, border-gradients);

  @each $gradient-name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $gradient-name, $gradients);

    .#{$prefix}#{$class-name} {
      @include border-gradient($gradient-name);
    }
  }

  // Generic border gradient usando brand - Solo si template habilitado
  @if map.get($utility-classes, border-gradients) != "" {
    .#{$prefix}border-gradient {
      @include border-gradient(brand);
    }
  }
}

/*
 * ================ Scrim Gradients - Template System ================
 * Sistema de gradientes suavizados con variantes configurables
 */
@if map.get($utility-classes, scrim-gradients) and map.get($utility-classes, scrim-gradients) != ""
{
  $template: map.get($utility-classes, scrim-gradients);

  // Scrim variants configuration
  $scrim-variants: (
    default: (
        color: $shadow-color,
        opacity: 0.9,
        direction: "to top",
      ),
    dark: (
        color: $shadow-color,
        opacity: 0.95,
        direction: "to top",
      ),
    light: (
        color: white,
        opacity: 0.8,
        direction: "to top",
      ),
    bottom: (
        color: $shadow-color,
        opacity: 0.9,
        direction: "to bottom",
      ),
    left: (
        color: $shadow-color,
        opacity: 0.9,
        direction: "to left",
      ),
    right: (
        color: $shadow-color,
        opacity: 0.9,
        direction: "to right",
      ),
  );

  @each $variant-name, $variant-config in $scrim-variants {
    $class-name: parse-scrim-template($template, $variant-name);

    @if $class-name != "" {
      .#{$prefix}#{$class-name} {
        background-image: scrim-gradient(
            map.get($variant-config, color),
            map.get($variant-config, opacity),
            map.get($variant-config, direction)
          )
          #{$important};
      }
    }
  }
} @else if not map.has-key($utility-classes, scrim-gradients) {
  // Fallback para compatibilidad - Solo si no est√° configurado en templates
  .scrim {
    background-image: scrim-gradient($shadow-color);
  }
}
