@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/hover.core" as *;
@use "../core/colors.core" as *;

/*
 * ================ Color Utilities Generator ================
 */

/*
 * Background Colors
 */
@if $generate-background-colors {
  $template: map.get($utility-classes, background-colors);

  @each $theme-name, $theme-colors in $themes {
    @each $color-name, $color-value in $theme-colors {
      $class-name: parse-color-template($template, $color-name, $theme-colors);

      .#{$prefix}#{$class-name} {
        @include hover {
          --bg-opacity: 1;
          background-color: color($color-name, var(--bg-opacity)) #{$important};
        }
      }
    }
  }
}

/*
 * Background Opacity
 */
@if $generate-background-opacity {
  $template: map.get($utility-classes, background-opacity);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        --bg-opacity: #{$value} #{$important};
      }
    }
  }
}

/*
 * Text Colors
 */
@if $generate-text-colors {
  $template: map.get($utility-classes, text-colors);

  @each $theme-name, $theme-colors in $themes {
    @each $color-name, $color-value in $theme-colors {
      $class-name: parse-color-template($template, $color-name, $theme-colors);

      .#{$prefix}#{$class-name} {
        @include hover {
          --color-opacity: 1;
          color: color($color-name, var(--color-opacity)) #{$important};
        }
      }
    }
  }
}

/*
 * Text Opacity
 */
@if $generate-text-opacity {
  $template: map.get($utility-classes, text-opacity);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        --color-opacity: #{$value} #{$important};
      }
    }
  }
}

@use "sass:map";
@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/hover.core" as *;

/*
 * ================ Opacity Utilities Generator ================
 */

@if $generate-opacities {
  $template: map.get($utility-classes, opacities);

  @each $name, $value in $opacity-scale {
    $class-name: parse-opacity-template($template, $name, $value);

    .#{$prefix}#{$class-name} {
      @include hover {
        opacity: #{$value} #{$important};
      }
    }
  }
}

/*
 * ================ Gradient Utilities Generator ================
 */

/*
 * Background Gradients
 */
@if $generate-background-gradients {
  $template: map.get($utility-classes, background-gradients);

  @each $name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $name);

    .#{$prefix}#{$class-name} {
      background: gradient($name) #{$important};
    }
  }
}

/*
 * Text Gradients
 */
@if $generate-text-gradients {
  $template: map.get($utility-classes, text-gradients);

  @each $name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $name);

    .#{$prefix}#{$class-name} {
      @include text-gradient($name, "", linear, to right);
    }
  }

  // Generic text gradient using brand
  .#{$prefix}text-gradient {
    @include text-gradient(brand);
  }
}

/*
 * Border Gradients
 */
@if $generate-border-gradients {
  $template: map.get($utility-classes, border-gradients);

  @each $name, $gradient-colors in $gradients {
    $class-name: parse-gradient-template($template, $name);

    .#{$prefix}#{$class-name} {
      @include border-gradient($name);
    }
  }

  // Generic border gradient using brand
  .#{$prefix}border-gradient {
    @include border-gradient(brand);
  }
}

/*
 * Scrim gradient (special utility)
 */
.scrim {
  background-image: scrim-gradient($shadow-color);
}
