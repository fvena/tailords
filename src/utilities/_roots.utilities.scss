@use "sass:meta";
@use "sass:list";
@use "../variables" as *;
@use "../core/colors.core" as *;
@use "../core/utils.core" as *;
@use "../core/gradients.core" as *;
@use "../core/shadows.core" as *;
@use "../core/borders.core" as *;
@use "../core/types.core" as *;

/*
 * ================ CSS Custom Properties Generator ================
 */

@if $generate-css-variables and $css-variables {
  :root {
    --FONT-FAMILIES-----------------: 01;

    @each $key, $value in $font-families {
      --font-#{'' + $key}: #{meta.inspect($value)};
    }

    --FONT-SIZES--------------------: 02;

    @each $key, $value in $font-sizes {
      --font-#{'' + $key}: #{font-size($key)};
    }

    --FONT-WEIGHTS------------------: 03;

    @each $key, $value in $font-weights {
      --font-#{'' + $key}: #{$value};
    }

    --TEXT-LEADING------------------: 04;

    @each $key, $value in $line-heights {
      --leading-#{'' + $key}: #{leading($key)};
    }

    --TRACKING----------------------: 05;

    @each $key, $value in $tracking {
      --tracking-#{'' + $key}: #{$value};
    }

    --RADIUS------------------------: 06;

    @each $key, $value in $border-radius {
      --radius-#{'' + $key}: #{$value};
    }

    --SHADOWS-----------------------: 08;

    --shadow-color: #{hex2rgb($shadow-color)};

    @each $key, $value in $shadow-scale {
      --shadow-#{'' + $key}: #{shadow($value)};
    }

    --GRADIENTS---------------------: 09;

    @each $gradient, $gradient-value in $gradients {
      --#{'' + $gradient}-gradient: #{gradient(
          #{list.nth($gradient-value, 1)},
          #{list.nth($gradient-value, 2)}
        )};
    }

    --BORDERS-----------------------: 11;

    @each $width, $width-value in $border-widths {
      --border-#{'' + $width}: #{border($width-value)};
    }

    --border-color: #{color($border-default-color)};
    --border-width: #{border($border-default-width)};
    --border-style: #{$border-default-style};

    --SPACE-------------------------: 12;

    --space: #{$space-base};
  }

  /*
   * Theme-specific CSS custom properties
   */
  @if not map.has-key($themes, $primary-theme) {
    @error 'Primary theme "#{$primary-theme}" not found in themes configuration. Available themes: #{map.keys($themes)}';
  }

  // Primary theme
  :root,
  .#{$prefix}#{$primary-theme}-mode,
  [data-theme="#{$primary-theme}"] {
    --COLORS------------------------: 10;

    $primary-map: map.get($themes, $primary-theme);
    @each $color, $color-value in $primary-map {
      @if meta.type-of($color-value) == "map" {
        --#{'' + $color}: #{hex2rgb(map.get($color-value, value))};
      } @else {
        --#{'' + $color}: #{hex2rgb($color-value)};
      }
    }
  }

  // Other themes
  @each $theme, $theme-map in $themes {
    @if $theme != $primary-theme {
      .#{$prefix}#{$theme}-mode,
      [data-theme="#{$theme}"] {
        @each $color, $color-value in $theme-map {
          @if meta.type-of($color-value) == "map" {
            --#{$color}: #{hex2rgb(map.get($color-value, value))};
          } @else {
            --#{$color}: #{hex2rgb($color-value)};
          }
        }
      }
    }
  }
}
