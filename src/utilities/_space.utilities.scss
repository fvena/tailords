@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/responsive.core" as *;
@use "../core/sizes.core" as *;

/*
 * ================ Dimensions Utilities Generator ================
 */

/*
 * Widths - Relative sizes
 */
@if $generate-widths {
  $template: map.get($utility-classes, widths);

  // Relative sizes
  @each $size-name, $size-value in $spacing-scale {
    $class-name: parse-spacing-template($template, $size-name);

    .#{$prefix}#{$class-name} {
      @include responsive {
        width: size($size-name) #{$important};
      }
    }
  }

  // Percentage sizes
  @each $size, $value in $size-percentages {
    $class-name: str-replace($template, "{size}", $size);

    .#{$prefix}#{$class-name} {
      @include responsive {
        width: #{$value * 1%} #{$important};
      }
    }
  }

  // Auto width
  .#{$prefix}w-auto {
    @include responsive {
      width: auto #{$important};
    }
  }
}

/*
 * Heights - Relative sizes
 */
@if $generate-heights {
  $template: map.get($utility-classes, heights);

  // Relative sizes
  @each $size-name, $size-value in $spacing-scale {
    $class-name: parse-spacing-template($template, $size-name);

    .#{$prefix}#{$class-name} {
      @include responsive {
        height: size($size-name) #{$important};
      }
    }
  }

  // Percentage sizes
  @each $size, $value in $size-percentages {
    $class-name: str-replace($template, "{size}", $size);

    .#{$prefix}#{$class-name} {
      @include responsive {
        height: #{$value * 1%} #{$important};
      }
    }
  }

  // Auto height
  .#{$prefix}h-auto {
    @include responsive {
      height: auto #{$important};
    }
  }
}

/*
 * ================ Spacing Utilities Generator ================
 */

/*
 * Margins
 */
@if $generate-margins {
  $template: map.get($utility-classes, margins);

  @each $size-name, $size-value in $spacing-scale {
    $directions: (
      all: null,
      top: top,
      right: right,
      bottom: bottom,
      left: left,
      x: x,
      y: y,
    );

    @each $direction-key, $direction-value in $directions {
      $class-name: parse-spacing-template($template, $size-name, $direction-key);

      .#{$prefix}#{$class-name} {
        @include responsive {
          @if $direction-value == null {
            margin: size($size-name) #{$important};
          } @else if $direction-value == x {
            margin-right: size($size-name) #{$important};
            margin-left: size($size-name) #{$important};
          } @else if $direction-value == y {
            margin-top: size($size-name) #{$important};
            margin-bottom: size($size-name) #{$important};
          } @else {
            margin-#{$direction-value}: size($size-name) #{$important};
          }
        }
      }
    }
  }

  // Margin auto para centrado horizontal
  .#{$prefix}margin-auto {
    @include responsive {
      margin-right: auto #{$important};
      margin-left: auto #{$important};
    }
  }
}

/*
 * Paddings
 */
@if $generate-paddings {
  $template: map.get($utility-classes, paddings);

  @each $size-name, $size-value in $spacing-scale {
    $directions: (
      all: null,
      top: top,
      right: right,
      bottom: bottom,
      left: left,
      x: x,
      y: y,
    );

    @each $direction-key, $direction-value in $directions {
      $class-name: parse-spacing-template($template, $size-name, $direction-key);

      .#{$prefix}#{$class-name} {
        @include responsive {
          @if $direction-value == null {
            padding: size($size-name) #{$important};
          } @else if $direction-value == x {
            padding-right: size($size-name) #{$important};
            padding-left: size($size-name) #{$important};
          } @else if $direction-value == y {
            padding-top: size($size-name) #{$important};
            padding-bottom: size($size-name) #{$important};
          } @else {
            padding-#{$direction-value}: size($size-name) #{$important};
          }
        }
      }
    }
  }
}
