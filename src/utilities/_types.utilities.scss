@use "sass:map";
@use "../variables" as *;
@use "../core/helpers.core" as *;
@use "../core/responsive.core" as *;
@use "../core/types.core" as *;
@use "../core/colors.core" as *;

/*
 * ================ Typography Utilities Generator ================
 */

/*
 * Font Sizes
 */
@if $generate-font-sizes {
  $template: map.get($utility-classes, font-sizes);

  @each $size-name, $size-value in $font-sizes {
    $class-name: parse-font-template($template, $size-name, $font-sizes);

    .#{$prefix}#{$class-name} {
      @include responsive {
        font-size: font-size($size-name) #{$important};
      }
    }
  }
}

/*
 * Font Weights
 */
@if $generate-font-weights {
  $template: map.get($utility-classes, font-weights);

  @each $weight-name, $weight-value in $font-weights {
    $class-name: parse-font-template($template, $weight-name, $font-weights);

    .#{$prefix}#{$class-name} {
      font-weight: font-weight($weight-name) #{$important};
    }
  }
}

/*
 * Font Families
 */
@if $generate-font-families {
  $template: map.get($utility-classes, font-families);

  @each $family-name, $family-value in $font-families {
    $class-name: parse-font-template($template, $family-name, $font-families);

    .#{$prefix}#{$class-name} {
      font-family: font-family($family-name) #{$important};
    }
  }
}

/*
 * Line Heights
 */
@if $generate-line-heights {
  $template: map.get($utility-classes, line-heights);

  @each $leading-name, $leading-value in $line-heights {
    $class-name: parse-font-template($template, $leading-name, $line-heights);

    .#{$prefix}#{$class-name} {
      line-height: leading($leading-name) #{$important};
    }
  }
}

/*
 * Letter Spacing
 */
@if $generate-letter-spacing {
  $template: map.get($utility-classes, letter-spacing);

  @each $tracking-name, $tracking-value in $tracking {
    $class-name: parse-font-template($template, $tracking-name, $tracking);

    .#{$prefix}#{$class-name} {
      @if $tracking-name == medium {
        letter-spacing: initial #{$important};
      } @else {
        letter-spacing: $tracking-value #{$important};
      }
    }
  }
}

/*
 * Text Alignment
 */
@if $generate-text-alignment {
  $template: map.get($utility-classes, text-alignment);
  $alignments: (left, center, right, justify);

  @each $alignment in $alignments {
    $class-name: str-replace($template, "{alignment}", $alignment);

    .#{$prefix}#{$class-name} {
      @include responsive {
        text-align: #{$alignment} #{$important};
      }
    }
  }
}

/*
 * Text Transforms
 */
@if $generate-text-transforms {
  $template: map.get($utility-classes, text-transforms);
  $transforms: (uppercase, lowercase, capitalize, none);

  @each $transform in $transforms {
    $class-name: str-replace($template, "{transform}", $transform);

    .#{$prefix}#{$class-name} {
      text-transform: #{$transform} #{$important};
    }
  }
}

/*
 * Text Decorations
 */
@if $generate-text-decorations {
  $template: map.get($utility-classes, text-decorations);
  $decorations: (underline, overline, line-through, none);

  @each $decoration in $decorations {
    $class-name: str-replace($template, "{decoration}", $decoration);

    .#{$prefix}#{$class-name} {
      text-decoration: #{$decoration} #{$important};
    }
  }
}

/*
 * Text Truncation
 */
@if $generate-text-truncation {
  $template: map.get($utility-classes, text-truncation);

  .#{$prefix}truncate {
    overflow: hidden #{$important};
    text-overflow: ellipsis #{$important};
    white-space: nowrap #{$important};
  }

  .#{$prefix}truncate-2 {
    display: -webkit-box #{$important};
    overflow: hidden #{$important};
    -webkit-line-clamp: 2 #{$important};
    -webkit-box-orient: vertical #{$important};
  }

  .#{$prefix}truncate-3 {
    display: -webkit-box #{$important};
    overflow: hidden #{$important};
    -webkit-line-clamp: 3 #{$important};
    -webkit-box-orient: vertical #{$important};
  }

  .#{$prefix}truncate-4 {
    display: -webkit-box #{$important};
    overflow: hidden #{$important};
    -webkit-line-clamp: 4 #{$important};
    -webkit-box-orient: vertical #{$important};
  }
}

/*
 * Style Guide Combinations
 */
@if $generate-style-guide {
  $template: map.get($utility-classes, style-guide);

  @each $size-name in map.get($style-guide-combinations, sizes) {
    @each $weight-name in map.get($style-guide-combinations, weights) {
      @each $color-name in map.get($style-guide-combinations, colors) {
        %#{$size-name}-#{$weight-name}-#{$color-name},
        .#{$prefix}#{$size-name}-#{$weight-name}-#{$color-name} {
          font-size: font-size($size-name) #{$important};
          font-weight: font-weight($weight-name) #{$important};
          color: color($color-name) #{$important};
        }
      }
    }
  }
}
